Below are the changes for the current release.
See the CHANGES file for changes in older releases.
See the RELEASENOTES file for a summary of changes in each release.

Version 3.0.8 (in progress)
===========================

2015-10-10: wsfulton
            [Python] #539 - Support Python 3.5 and -builtin.  PyAsyncMethods is a new
            member in PyHeapTypeObject.

2015-10-06: ianlancetaylor
	    [Go] Don't emit a constructor function for a director
	    class with an abstract method, since the function will
	    always panic.

2015-10-01: wsfulton
            Fix %shared_ptr support for private and protected inheritance.
            - Remove unnecessary Warning 520: Derived class 'Derived' of 'Base'
              is not similarly marked as a smart pointer
            - Do not generate code that attempts to cast up the inheritance chain in the
              type system runtime in such cases as it doesn't compile and can't be used.
            Remove unnecessary warning 520 for %shared_ptr when the base class is ignored.

2015-10-01: vkalinin
            Fix #508: Fix segfault parsing anonymous typedef nested classes.

2015-09-26: wsfulton
            [Ruby] Add shared_ptr support

2015-09-13: kkaempf
            [Ruby] Resolve tracking bug - issue #225.
            The bug is that the tracking code uses a ruby hash and thus may
            allocate objects (Bignum) while running the GC. This was tolerated in
            1.8 but is invalid (raises an exception) in 1.9.
            The patch uses a C hash (also used by ruby) instead.

2015-09-09: lyze
            [CFFI] Extend the "export" feature in the CFFI module to support
            exporting to a specified package.

2015-09-04: olly
	    [Python] Fix docstrings for %callback functions.

2015-09-03: demi-rluddy
            [Go] Removed golang stringing for signed/unsigned char

            Changed default handling of signed char* and unsigned char* to be
            opaque pointers rather than strings, similarly to how other
            languages work.

            Any existing code relying on treating signed char* or unsigned
            char* as a string can restore the old behavior with typemaps.i by
            using %apply to copy the [unchanged] char* behavior.

            *** POTENTIAL INCOMPATIBILITY ***

2015-08-07: talby
            [Perl] tidy -Wtautological-constant-out-of-range-compare warnings when building generated code under clang

2015-08-07: xantares
            [Python] pep257 & numpydoc conforming docstrings:
            - Mono-line module docsstring
            - Rewrite autodoc parameters section in numpydoc style:
              https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt
            - One line summary should end with "."
            - Adds a blank line after class docstring

2015-08-05: vadz
            [Java] Make (char* STRING, size_t LENGTH) typemaps usable for
            strings of other types, e.g. "unsigned char*".
