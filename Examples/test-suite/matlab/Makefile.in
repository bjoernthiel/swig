#######################################################################
# Makefile for matlab test-suite
#######################################################################

LANGUAGE     = matlab
MATLAB       = @MATLAB@
MATLABOPTS   = -nodisplay -nosplash -nojvm
SCRIPTSUFFIX = _runme

srcdir       = @srcdir@
top_srcdir   = @top_srcdir@
top_builddir = @top_builddir@

#CPP_TEST_CASES += \
#	li_std_pair_extra \
#	li_std_string_extra \
#	matlab_cell_deref\
#	matlab_dim

# CPP_TEST_BROKEN += \
# 	allprotected \
# 	apply_signed_char \
# 	apply_strings \
# 	nested_directors \
# 	special_variables \
# 	typemap_directorout \
# 	director_abstract \
# 	director_alternating \
# 	director_basic \
# 	director_binary_string \
# 	director_classes \
# 	director_classic \
# 	director_constructor \
# 	director_default \
# 	director_detect \
# 	director_enum \
# 	director_exception \
# 	director_extend \
# 	director_finalizer \
# 	director_frob \
# 	director_ignore \
# 	director_keywords \
# 	director_namespace_clash \
# 	director_nested \
# 	director_nspace_director_name_collision \
# 	director_nspace \
# 	director_overload2 \
# 	director_overload \
# 	director_primitives \
# 	director_profile \
# 	director_protected \
# 	director_protected_overloaded \
# 	director_redefined \
# 	director_smartptr \
# 	director_stl \
# 	director_string \
# 	director_thread \
# 	director_unroll \
# 	director_using \
# 	director_wombat \
# 	director_wstring

#C_TEST_CASES +=

#
# This test only works with modern C compilers
#
#C_TEST_CASES += \
#	complextest

include $(srcdir)/../common.mk

# Overridden variables here
#LIBS       = -L.
#CSRCS      = matlab_empty.c

# Custom tests - tests with additional commandline options
# none!

# Rules for the different types of tests
%.cpptest:
	$(setup)
	+$(swig_and_compile_cpp)
	$(run_testcase)

%.ctest:
	$(setup)
	+$(swig_and_compile_c)
	$(run_testcase)

%.multicpptest:
	$(setup)
	+$(swig_and_compile_multi_cpp)
	$(run_testcase)

# Runs the testcase. A testcase is only run if
# a file is found which has _runme.m appended after the testcase name.
run_testcase = \
	if [ -f $(SCRIPTDIR)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX).m ]; then \
	 RUNSCRIPT="\
	  try; \
	    $(SCRIPTPREFIX)$*$(SCRIPTSUFFIX); \
	  catch err; \
	    fprintf(1, ['ERROR: ' err.message '\\\n']); \
	    fprintf(2, ['ERROR: ' err.message '\\\n']); \
	    exit(1); \
	    end; \
	  exit(0)" ; \
	 env LD_LIBRARY_PATH=".:$$LD_LIBRARY_PATH" MATLABPATH="$(srcdir):$(SCRIPTDIR):$$MATLAB_PATH" \
	 $(RUNTOOL) "$(MATLAB)" $(MATLABOPTS) -r "$$RUNSCRIPT"  $(RUNPIPE); \
	 if [ $$? -ne 0 ] ; then \
	   echo "   $* failed" $(RUNPIPE) ; \
	 else \
	   echo "   $* passed" $(RUNPIPE) ; \
	 fi \
	else \
	   echo "   $* build passed (no runme test present)" $(RUNPIPE) ; \
	fi

# Clean: remove the generated .m file
%.clean:
	@rm -rf $*.m +$*;

clean:
	$(MAKE) -f $(top_builddir)/$(EXAMPLES)/Makefile SRCDIR="$(SRCDIR)" matlab_clean

cvsignore:
	@echo '*wrap* *.mex* *.so *.dll *.exp *.lib'
	@echo Makefile
	@for i in ${CPP_TEST_CASES} ${C_TEST_CASES}; do echo $$i.m; done
	@for i in ${CPP_TEST_CASES} ${C_TEST_CASES}; do if grep -q $${i}_runme.m CVS/Entries ; then echo $${i}_runme.m; fi; done
